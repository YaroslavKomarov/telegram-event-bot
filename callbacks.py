import logging
from telegram import Update
from telegram.ext import ContextTypes
from telegram.error import TelegramError

from database import db
from config import STATES, ADMIN_CHAT_ID, CHANNEL_ID
from keyboards import get_main_menu_keyboard, get_admin_moderation_keyboard
from utils import format_event_announcement, format_admin_preview, get_user_info_string
from handlers import show_event_preview

logger = logging.getLogger(__name__)

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user_id = query.from_user.id
    
    logger.info(f"Callback received: data='{data}', user_id={user_id}, chat_id={query.message.chat.id}")
    
    try:
        if data.startswith('edit_'):
            logger.info(f"Routing to edit handler")
            await handle_edit_callback(update, context, data)
        elif data.startswith('submit_'):
            logger.info(f"Routing to submit handler")
            await handle_submit_callback(update, context, data)
        elif data.startswith('cancel_'):
            logger.info(f"Routing to cancel handler")
            await handle_cancel_callback(update, context, data)
        elif data.startswith('approve_'):
            logger.info(f"Routing to approve handler")
            await handle_approve_callback(update, context, data)
        elif data.startswith('reject_'):
            logger.info(f"Routing to reject handler")
            await handle_reject_callback(update, context, data)
        elif data == 'skip_photo':
            logger.info(f"Routing to skip photo handler")
            await handle_skip_photo_callback(update, context)
        elif data == 'cancel_creation':
            logger.info(f"Routing to cancel creation handler")
            await handle_cancel_creation_callback(update, context)
        else:
            logger.warning(f"Unknown callback data: {data}")
    except Exception as e:
        logger.error(f"Error handling callback {data}: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_edit_callback(update: Update, context: ContextTypes.DEFAULT_TYPE, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π —Å–æ–±—ã—Ç–∏—è"""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: edit_{field}_{event_id}
    parts = data.split('_')
    field = parts[1]
    event_id = int(parts[2])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    event = db.get_event(event_id)
    if not event or event['user_id'] != user_id:
        await query.edit_message_text("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    edit_data = {'field': field, 'event_id': event_id}
    db.set_user_state(user_id, STATES['EDITING'], event_id, edit_data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥
    field_names = {
        'theme': '—Ç–µ–º—É —Å–æ–±—ã—Ç–∏—è',
        'place': '–º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è',
        'contact': '–∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏',
        'time': '–≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è',
        'photo': '—Ñ–æ—Ç–æ —Å–æ–±—ã—Ç–∏—è',
        'description': '–æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è'
    }
    
    field_name = field_names.get(field, field)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
    if query.message.photo:
        # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message_caption
        if field == 'photo':
            await query.edit_message_caption(
                caption="üìù –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '—É–¥–∞–ª–∏—Ç—å' —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ"
            )
        else:
            await query.edit_message_caption(
                caption=f"üìù –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{field_name}':"
            )
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if field == 'photo':
            await query.edit_message_text(
                "üìù –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '—É–¥–∞–ª–∏—Ç—å' —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ"
            )
        else:
            await query.edit_message_text(
                f"üìù –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{field_name}':"
            )

async def handle_editing_input(update: Update, context: ContextTypes.DEFAULT_TYPE, user_state: dict, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    user_id = update.effective_user.id
    edit_data = user_state.get('data', {})
    field = edit_data.get('field')
    event_id = edit_data.get('event_id')
    
    if not field or not event_id:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    success = False
    
    if field == 'theme':
        from utils import validate_theme
        if validate_theme(text):
            db.update_event(event_id, theme=text)
            success = True
    elif field == 'place':
        from utils import validate_place
        if validate_place(text):
            db.update_event(event_id, place=text)
            success = True
    elif field == 'contact':
        from utils import validate_contact
        if validate_contact(text):
            db.update_event(event_id, contact=text)
            success = True
    elif field == 'time':
        from utils import validate_time
        if validate_time(text):
            db.update_event(event_id, event_time=text)
            success = True
    elif field == 'description':
        from utils import validate_description
        if text.lower() == '—É–¥–∞–ª–∏—Ç—å':
            db.update_event(event_id, description=None)
            success = True
        elif validate_description(text):
            db.update_event(event_id, description=text)
            success = True
    
    if success:
        await update.message.reply_text("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        await show_event_preview(update, context, event_id)
    else:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_photo_editing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ"""
    user_id = update.effective_user.id
    user_state = db.get_user_state(user_id)
    
    if not user_state or user_state['state'] != STATES['EDITING']:
        return
    
    edit_data = user_state.get('data', {})
    if edit_data.get('field') != 'photo':
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ
    if not update.message.photo:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ.\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .png, .jpeg, .jpg"
        )
        return
    
    event_id = edit_data.get('event_id')
    photo = update.message.photo[-1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
    db.update_event(event_id, photo_file_id=photo.file_id)
    
    await update.message.reply_text("‚úÖ –§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await show_event_preview(update, context, event_id)

async def handle_submit_callback(update: Update, context: ContextTypes.DEFAULT_TYPE, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
    query = update.callback_query
    user_id = query.from_user.id
    
    logger.info(f"Submit callback: data={data}, user_id={user_id}")
    
    # –ü–∞—Ä—Å–∏–º event_id
    event_id = int(data.split('_')[1])
    logger.info(f"Parsed event_id: {event_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    event = db.get_event(event_id)
    if not event:
        logger.error(f"Event {event_id} not found")
        await query.edit_message_text("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    if event['user_id'] != user_id:
        logger.error(f"Access denied: event user_id={event['user_id']}, query user_id={user_id}")
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    logger.info(f"Starting moderation process for event {event_id}")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    await send_to_moderation(query, context, event)

async def send_to_moderation(query, context, event):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    try:
        logger.info(f"Preparing admin message for event {event['id']}")
        user_info = get_user_info_string(query.from_user)
        admin_text = format_admin_preview(event, user_info)
        
        logger.info(f"Sending to admin chat {ADMIN_CHAT_ID}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if event['photo_file_id']:
            logger.info("Sending admin message with photo")
            admin_message = await context.bot.send_photo(
                chat_id=ADMIN_CHAT_ID,
                photo=event['photo_file_id'],
                caption=admin_text,
                parse_mode='HTML',
                reply_markup=get_admin_moderation_keyboard(event['id'])
            )
        else:
            logger.info("Sending admin message without photo")
            admin_message = await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=admin_text,
                parse_mode='HTML',
                reply_markup=get_admin_moderation_keyboard(event['id'])
            )
        
        logger.info(f"Admin message sent successfully, message_id: {admin_message.message_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        db.update_event(event['id'], 
                       status='pending', 
                       admin_message_id=admin_message.message_id)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.clear_user_state(query.from_user.id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if query.message.photo:
            await query.edit_message_caption(
                caption="‚úÖ –ê–Ω–æ–Ω—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n\n"
                       "–¢—ã –ø–æ–ª—É—á–∏—à—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –∑–∞—è–≤–∫—É.",
                reply_markup=None
            )
        else:
            await query.edit_message_text(
                "‚úÖ –ê–Ω–æ–Ω—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n\n"
                "–¢—ã –ø–æ–ª—É—á–∏—à—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –∑–∞—è–≤–∫—É.",
                reply_markup=None
            )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error sending to moderation: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if query.message.photo:
            await query.edit_message_caption(
                caption="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é",
                reply_markup=None
            )
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")

async def handle_approve_callback(update: Update, context: ContextTypes.DEFAULT_TYPE, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–Ω–æ–Ω—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    query = update.callback_query
    logger.info(f"Approve callback received from chat {query.message.chat.id}, admin chat: {ADMIN_CHAT_ID}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –∞–¥–º–∏–Ω-—á–∞—Ç–∞
    if str(query.message.chat.id) != str(ADMIN_CHAT_ID):
        logger.warning(f"Access denied for chat {query.message.chat.id}")
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    event_id = int(data.split('_')[1])
    event = db.get_event(event_id)
    logger.info(f"Processing approve for event {event_id}")
    
    if not event:
        await query.edit_message_text("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    try:
        # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
        announcement_text = format_event_announcement(event)
        
        if event['photo_file_id']:
            channel_message = await context.bot.send_photo(
                chat_id=CHANNEL_ID,
                photo=event['photo_file_id'],
                caption=announcement_text,
                parse_mode='HTML'
            )
        else:
            channel_message = await context.bot.send_message(
                chat_id=CHANNEL_ID,
                text=announcement_text,
                parse_mode='HTML'
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è
        db.update_event(event_id, 
                       status='published', 
                       channel_message_id=channel_message.message_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await query.edit_message_text(
            f"‚úÖ <b>–ê–ù–û–ù–° –û–ü–£–ë–õ–ò–ö–û–í–ê–ù</b>\n\n"
            f"–°–æ–±—ã—Ç–∏–µ #{event_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ!",
            parse_mode='HTML',
            reply_markup=None
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
        await context.bot.send_message(
            chat_id=event['user_id'],
            text=f"üéâ <b>–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏!</b>\n\n"
                 f"–¢–≤–æ–π –∞–Ω–æ–Ω—Å '{event['theme']}' –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!\n\n"
                 f"–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! üôå",
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"Error approving event: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")

async def handle_reject_callback(update: Update, context: ContextTypes.DEFAULT_TYPE, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∞–Ω–æ–Ω—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    query = update.callback_query
    logger.info(f"Reject callback received from chat {query.message.chat.id}, admin chat: {ADMIN_CHAT_ID}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –∞–¥–º–∏–Ω-—á–∞—Ç–∞
    if str(query.message.chat.id) != str(ADMIN_CHAT_ID):
        logger.warning(f"Access denied for chat {query.message.chat.id}")
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    event_id = int(data.split('_')[1])
    event = db.get_event(event_id)
    logger.info(f"Processing reject for event {event_id}")
    
    if not event:
        await query.edit_message_text("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    db.update_event(event_id, status='rejected')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await query.edit_message_text(
        f"‚ùå <b>–ê–ù–û–ù–° –û–¢–ö–õ–û–ù–ï–ù</b>\n\n"
        f"–°–æ–±—ã—Ç–∏–µ #{event_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.",
        parse_mode='HTML',
        reply_markup=None
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
    await context.bot.send_message(
        chat_id=event['user_id'],
        text=f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–≤–æ–π –∞–Ω–æ–Ω—Å '{event['theme']}' –Ω–µ –ø—Ä–æ—à–µ–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n\n"
             f"–¢—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–Ω–æ–Ω—Å, –∏—Å–ø—Ä–∞–≤–∏–≤ –∑–∞–º–µ—á–∞–Ω–∏—è."
    )

async def handle_skip_photo_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ"""
    query = update.callback_query
    user_id = query.from_user.id
    user_state = db.get_user_state(user_id)
    
    if not user_state or user_state['state'] != STATES['WAITING_PHOTO']:
        await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        return
    
    event_id = user_state['event_id']
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é
    db.set_user_state(user_id, STATES['WAITING_DESCRIPTION'], event_id)
    
    await query.edit_message_text(
        "6Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏\n"
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –¥–µ–ª–∞—Ç—å, —á—Ç–æ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤):"
    )

async def handle_cancel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    db.clear_user_state(user_id)
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if query.message.photo:
        await query.edit_message_caption(
            caption="‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–æ–Ω—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=None
        )
    else:
        await query.edit_message_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–æ–Ω—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=None
        )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await context.bot.send_message(
        chat_id=user_id,
        text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard()
    )

async def handle_cancel_creation_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–π –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è"""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    db.clear_user_state(user_id)
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if query.message.photo:
        await query.edit_message_caption(
            caption="‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–æ–Ω—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=None
        )
    else:
        await query.edit_message_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–æ–Ω—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=None
        )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await context.bot.send_message(
        chat_id=user_id,
        text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard()
    ) 