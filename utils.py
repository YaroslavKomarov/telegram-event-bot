import re
from typing import Dict, Any, Optional
from datetime import datetime

def format_event_announcement(event: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–æ–Ω—Å–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    lines = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏
    if event.get('theme'):
        lines.append(f"üéâ <b>{event['theme']}</b>")
        lines.append("")
    
    # –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
    if event.get('place'):
        formatted_place = format_place_with_link(event['place'])
        lines.append(f"üìç <b>–ú–µ—Å—Ç–æ:</b> {formatted_place}")
    
    # –í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
    if event.get('event_time'):
        lines.append(f"üïê <b>–í—Ä–µ–º—è:</b> {event['event_time']}")
    
    # –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏
    if event.get('contact'):
        lines.append(f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {event['contact']}")
    
    # –û–ø–∏—Å–∞–Ω–∏–µ
    if event.get('description'):
        lines.append("")
        lines.append(f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>")
        lines.append(event['description'])
    
    # –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
    lines.append("")
    lines.append("üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º!")
    lines.append("#–ø–æ—à–ª–∏_–≥—É–ª—è—Ç—å #—Å–æ–±—ã—Ç–∏–µ")
    
    return "\n".join(lines)

def format_admin_preview(event: Dict[str, Any], user_info: str = "") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    lines = [
        "üîî <b>–ù–û–í–´–ô –ê–ù–û–ù–° –ù–ê –ú–û–î–ï–†–ê–¶–ò–Æ</b>",
        "",
        f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {user_info}",
        f"üÜî <b>ID —Å–æ–±—ã—Ç–∏—è:</b> {event['id']}",
        "",
        "üìã <b>–°–û–î–ï–†–ñ–ê–ù–ò–ï –ê–ù–û–ù–°–ê:</b>",
        "=" * 30
    ]
    
    lines.append(format_event_announcement(event))
    
    lines.extend([
        "",
        "=" * 30,
        "‚ö° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    ])
    
    return "\n".join(lines)

def validate_theme(theme: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–º—ã —Å–æ–±—ã—Ç–∏—è"""
    if not theme or len(theme.strip()) < 3:
        return False
    if len(theme) > 100:
        return False
    return True

def is_google_maps_link(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–æ–π –Ω–∞ Google Maps"""
    google_maps_patterns = [
        r'https?://maps\.google\.com/',
        r'https?://www\.google\.com/maps/',
        r'https?://goo\.gl/maps/',
        r'https?://maps\.app\.goo\.gl/',
        r'https?://www\.google\.ru/maps/',
        r'https?://maps\.google\.ru/',
    ]
    
    for pattern in google_maps_patterns:
        if re.search(pattern, text, re.IGNORECASE):
            return True
    return False

def format_place_with_link(place_text: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Å—ã–ª–æ–∫"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∏ –∞–¥—Ä–µ—Å, –∏ —Å—Å—ã–ª–∫–∞
    lines = place_text.split('\n')
    
    # –ò—â–µ–º —Å—Å—ã–ª–∫—É –≤ —Ç–µ–∫—Å—Ç–µ
    link = None
    address_parts = []
    
    for line in lines:
        line = line.strip()
        if is_google_maps_link(line):
            link = line
        elif line:
            address_parts.append(line)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏ –∞–¥—Ä–µ—Å, –∏ —Å—Å—ã–ª–∫–∞
    if link and address_parts:
        address = ' '.join(address_parts)
        return f"{address} ‚Äî <a href='{link}'>–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ</a>"
    
    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∞
    elif link:
        return f"<a href='{link}'>–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ</a>"
    
    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    else:
        return place_text

def validate_place(place: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ—Å—Ç–∞ —Å–æ–±—ã—Ç–∏—è"""
    if not place or len(place.strip()) < 3:
        return False
    if len(place) > 500:  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è —Å—Å—ã–ª–æ–∫
        return False
    return True

def validate_contact(contact: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è —Å–≤—è–∑–∏"""
    if not contact or len(contact.strip()) < 3:
        return False
    if len(contact) > 100:
        return False
    return True

def validate_time(time_str: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è"""
    if not time_str or len(time_str.strip()) < 3:
        return False
    if len(time_str) > 100:
        return False
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–∏
    return True

def validate_description(description: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    if not description:
        return True  # –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
    if len(description) > 500:
        return False
    return True

def clean_text(text: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤"""
    if not text:
        return ""
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    text = re.sub(r'\s+', ' ', text.strip())
    return text

def get_user_info_string(user) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    parts = []
    if hasattr(user, 'first_name') and user.first_name:
        parts.append(user.first_name)
    if hasattr(user, 'last_name') and user.last_name:
        parts.append(user.last_name)
    if hasattr(user, 'username') and user.username:
        parts.append(f"@{user.username}")
    
    if parts:
        return " ".join(parts) + f" (ID: {user.id})"
    return f"ID: {user.id}"

def truncate_text(text: str, max_length: int = 50) -> str:
    """–û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏—è"""
    if not text:
        return ""
    if len(text) <= max_length:
        return text
    return text[:max_length-3] + "..." 