import logging
from telegram import Update, InputMediaPhoto
from telegram.ext import ContextTypes
from telegram.error import TelegramError

from database import db
from config import STATES, ADMIN_CHAT_ID, CHANNEL_ID, MAX_TEXT_LENGTH
from keyboards import (
    get_main_menu_keyboard, get_preview_keyboard, get_admin_moderation_keyboard,
    get_skip_photo_keyboard, get_cancel_keyboard
)
from utils import (
    format_event_announcement, format_admin_preview, get_user_info_string,
    validate_theme, validate_place, validate_contact, validate_time, validate_description, clean_text
)

logger = logging.getLogger(__name__)

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å –∞–Ω–æ–Ω—Å –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏
–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –µ–≥–æ –≤ –∫–∞–Ω–∞–ª–µ ¬´–ê–π–¥–∞ –≥—É–ª—è—Ç—å, –ù–æ–≤–∏-–°–∞–¥!¬ª

–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´üì£ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É¬ª, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∞–Ω–æ–Ω—Å!
"""
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=get_main_menu_keyboard()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

1. –ù–∞–∂–º–∏ "üì£ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É"
2. –ü–æ—à–∞–≥–æ–≤–æ –∑–∞–ø–æ–ª–Ω–∏ –≤—Å–µ –ø–æ–ª—è:
   ‚Ä¢ –¢–µ–º–∞ —Å–æ–±—ã—Ç–∏—è
   ‚Ä¢ –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
   ‚Ä¢ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
   ‚Ä¢ –§–æ—Ç–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
   ‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
3. –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –æ—Ç–ø—Ä–∞–≤—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
4. –î–æ–∂–¥–∏—Å—å –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
5. –ü–æ–ª—É—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –°–ø—Ä–∞–≤–∫–∞
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–æ–Ω—Å–∞
    """
    
    await update.message.reply_text(help_text)

async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
    user_id = update.effective_user.id
    db.clear_user_state(user_id)
    
    await update.message.reply_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–æ–Ω—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_menu_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if text == "üì£ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É":
        await start_event_creation(update, context)
    elif text == "üìã –ú–æ–∏ –∞–Ω–æ–Ω—Å—ã":
        await show_user_events(update, context)
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await help_command(update, context)
    else:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_state = db.get_user_state(user_id)
        if not user_state:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º üëá",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        await handle_user_input(update, context, user_state)

async def start_event_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    user = update.effective_user
    user_id = user.id
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
    event_id = db.create_event(user_id, user.username)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    db.set_user_state(user_id, STATES['WAITING_THEME'], event_id)
    
    await update.message.reply_text(
        "üéâ –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –∞–Ω–æ–Ω—Å —Å–æ–±—ã—Ç–∏—è.\n\n"
        "1Ô∏è‚É£ –ö–∞–∫–∞—è —Ç–µ–º–∞ —É –Ω–∞—à–µ–π –ø—Ä–æ–≥—É–ª–∫–∏? –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "'–ü—Ä–æ–≥—É–ª–∫–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É –≥–æ—Ä–æ–¥–∞' –∏–ª–∏ '–í—Å—Ç—Ä–µ—á–∞ –≤ –ø–∞—Ä–∫–µ'",
        reply_markup=get_cancel_keyboard()
    )

async def handle_user_input(update: Update, context: ContextTypes.DEFAULT_TYPE, user_state):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    user_id = update.effective_user.id
    text = clean_text(update.message.text)
    state = user_state['state']
    event_id = user_state['event_id']
    
    if state == STATES['WAITING_THEME']:
        await handle_theme_input(update, context, event_id, text)
    elif state == STATES['WAITING_PLACE']:
        await handle_place_input(update, context, event_id, text)
    elif state == STATES['WAITING_CONTACT']:
        await handle_contact_input(update, context, event_id, text)
    elif state == STATES['WAITING_TIME']:
        await handle_time_input(update, context, event_id, text)
    elif state == STATES['WAITING_DESCRIPTION']:
        await handle_description_input(update, context, event_id, text)
    elif state == STATES['EDITING']:
        from callbacks import handle_editing_input
        await handle_editing_input(update, context, user_state, text)

async def handle_theme_input(update: Update, context: ContextTypes.DEFAULT_TYPE, event_id: int, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–º—ã"""
    user_id = update.effective_user.id
    
    if not validate_theme(text):
        await update.message.reply_text(
            "‚ùå –¢–µ–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É
    db.update_event(event_id, theme=text)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    db.set_user_state(user_id, STATES['WAITING_PLACE'], event_id)
    
    await update.message.reply_text(
        f"‚úÖ –¢–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {text}\n\n"
        "2Ô∏è‚É£ –ì–¥–µ –≤—Å—Ç—Ä–µ—á–∞–µ–º—Å—è?\n\n"
        "üó∫ –õ—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç: –°–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É –∏–∑ Google Maps\n"
        "üìù –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –ù–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º\n"
        "üí° –°–æ–≤–µ—Ç: –ú–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ https://maps.google.com/...\n"
        "‚Ä¢ –ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ, –≥–ª–∞–≤–Ω—ã–π –≤—Ö–æ–¥\n"
        "‚Ä¢ –ö–∞—Ñ–µ '–ü—É—à–∫–∏–Ω'\nhttps://maps.google.com/...",
        reply_markup=get_cancel_keyboard()
    )

async def handle_place_input(update: Update, context: ContextTypes.DEFAULT_TYPE, event_id: int, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–µ—Å—Ç–∞"""
    user_id = update.effective_user.id
    
    if not validate_place(text):
        await update.message.reply_text(
            "‚ùå –ú–µ—Å—Ç–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—Ç–æ
    db.update_event(event_id, place=text)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    db.set_user_state(user_id, STATES['WAITING_CONTACT'], event_id)
    
    await update.message.reply_text(
        f"‚úÖ –ú–µ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {text}\n\n"
        "3Ô∏è‚É£ –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏\n\n"
        "–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (–≤–∞—à username –≤ Telegram –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞). "
        "–û–Ω –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω –≤—Å–µ–º –≤ –∞–Ω–æ–Ω—Å–µ.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ @username\n"
        "‚Ä¢ +7 900 123-45-67\n"
        "‚Ä¢ –ê–Ω–Ω–∞, @anna_walk",
        reply_markup=get_cancel_keyboard()
    )

async def handle_contact_input(update: Update, context: ContextTypes.DEFAULT_TYPE, event_id: int, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    user_id = update.effective_user.id
    
    if not validate_contact(text):
        await update.message.reply_text(
            "‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
    db.update_event(event_id, contact=text)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    db.set_user_state(user_id, STATES['WAITING_TIME'], event_id)
    
    await update.message.reply_text(
        f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {text}\n\n"
        "4Ô∏è‚É£ –ö–æ–≥–¥–∞ –≤—Å—Ç—Ä–µ—á–∞–µ–º—Å—è?\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ 25 –¥–µ–∫–∞–±—Ä—è, 12:30\n"
        "‚Ä¢ –ó–∞–≤—Ç—Ä–∞ –≤ 18:00\n"
        "‚Ä¢ –°—É–±–±–æ—Ç–∞, 15 –¥–µ–∫–∞–±—Ä—è –≤ 14:00",
        reply_markup=get_cancel_keyboard()
    )

async def handle_time_input(update: Update, context: ContextTypes.DEFAULT_TYPE, event_id: int, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    user_id = update.effective_user.id
    
    if not validate_time(text):
        await update.message.reply_text(
            "‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è
    db.update_event(event_id, event_time=text)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    db.set_user_state(user_id, STATES['WAITING_PHOTO'], event_id)
    
    await update.message.reply_text(
        f"‚úÖ –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {text}\n\n"
        "5Ô∏è‚É£ –°—É–ø–µ—Ä! –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –∞–Ω–æ–Ω—Å–∞. –§–æ—Ä–º–∞—Ç—ã: .png, .jpeg, .jpg\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª",
        reply_markup=get_skip_photo_keyboard()
    )

async def handle_photo_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ"""
    user_id = update.effective_user.id
    user_state = db.get_user_state(user_id)
    
    if not user_state or user_state['state'] != STATES['WAITING_PHOTO']:
        return
    
    event_id = user_state['event_id']
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    photo = update.message.photo[-1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ (Telegram –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä)
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ Telegram —Å–∂–∏–º–∞–µ—Ç —Ñ–æ—Ç–æ
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Ñ–æ—Ç–æ
    db.update_event(event_id, photo_file_id=photo.file_id)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é
    db.set_user_state(user_id, STATES['WAITING_DESCRIPTION'], event_id)
    
    await update.message.reply_text(
        "‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
        "6Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏\n"
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –¥–µ–ª–∞—Ç—å, —á—Ç–æ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=get_cancel_keyboard()
    )

async def handle_description_input(update: Update, context: ContextTypes.DEFAULT_TYPE, event_id: int, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    
    if text == "/skip":
        description = None
    else:
        if not validate_description(text):
            await update.message.reply_text(
                f"‚ùå –í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({len(text)}/500 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return
        description = text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    db.update_event(event_id, description=description)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    await show_event_preview(update, context, event_id)

async def show_event_preview(update: Update, context: ContextTypes.DEFAULT_TYPE, event_id: int):
    """–ü–æ–∫–∞–∑ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—ã—Ç–∏—è"""
    user_id = update.effective_user.id
    event = db.get_event(event_id)
    
    if not event:
        await update.message.reply_text("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    db.set_user_state(user_id, STATES['PREVIEW'], event_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    preview_text = "üéØ <b>–ü–†–ï–î–ü–†–û–°–ú–û–¢–† –ê–ù–û–ù–°–ê</b>\n\n" + format_event_announcement(event)
    
    if event['photo_file_id']:
        await update.message.reply_photo(
            photo=event['photo_file_id'],
            caption=preview_text,
            parse_mode='HTML',
            reply_markup=get_preview_keyboard(event_id)
        )
    else:
        await update.message.reply_text(
            preview_text,
            parse_mode='HTML',
            reply_markup=get_preview_keyboard(event_id)
        )

async def handle_invalid_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ"""
    user_id = update.effective_user.id
    user_state = db.get_user_state(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –±–æ—Ç —Ñ–æ—Ç–æ
    if user_state and user_state['state'] == STATES['WAITING_PHOTO']:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        media_type = "—Ñ–∞–π–ª"
        if update.message.video:
            media_type = "–≤–∏–¥–µ–æ"
        elif update.message.sticker:
            media_type = "—Å—Ç–∏–∫–µ—Ä"
        elif update.message.document:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            doc = update.message.document
            if doc.mime_type and doc.mime_type.startswith('image/'):
                media_type = "–¥–æ–∫—É–º–µ–Ω—Ç-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–∫ —Ñ–æ—Ç–æ, –∞ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç)"
            else:
                media_type = "–¥–æ–∫—É–º–µ–Ω—Ç"
        elif update.message.animation:
            media_type = "GIF"
        elif update.message.voice:
            media_type = "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        elif update.message.audio:
            media_type = "–∞—É–¥–∏–æ"
        elif update.message.video_note:
            media_type = "–≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ"
        
        await update.message.reply_text(
            f"‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ (–Ω–µ {media_type}).\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .png, .jpeg, .jpg",
            reply_markup=get_skip_photo_keyboard()
        )
    elif user_state and user_state['state'] == STATES['EDITING']:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –ª–∏ —Ñ–æ—Ç–æ
        edit_data = user_state.get('data', {})
        if edit_data.get('field') == 'photo':
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ (–Ω–µ –≤–∏–¥–µ–æ –∏–ª–∏ —Å—Ç–∏–∫–µ—Ä).\n\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .png, .jpeg, .jpg"
            )

async def show_user_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await update.message.reply_text(
        "üìã –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –∞–Ω–æ–Ω—Å–æ–≤!"
    ) 